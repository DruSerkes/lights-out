{"version":3,"sources":["Cell.js","Board.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Cell","flipCellsAround","isLit","classes","className","onClick","Board","nrows","ncols","chanceLightStartsOn","useState","createBoard","board","setBoard","initialBoard","x","newRow","y","Math","random","push","coord","oldBoard","split","map","Number","flipCell","boardCopy","cloneDeep","resetGame","hasWon","tableBody","tableRow","key","Footer","year","copy","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAqBeA,MALf,YAA2C,IAA3BC,EAA0B,EAA1BA,gBAAiBC,EAAS,EAATA,MAC1BC,EAAO,eAAWD,EAAQ,WAAa,IAC7C,OAAO,wBAAIE,UAAWD,EAASE,QAASJ,K,yBCmI1BK,MAvHf,YAAqE,IAAD,IAAnDC,aAAmD,MAA3C,EAA2C,MAAxCC,aAAwC,MAAhC,EAAgC,MAA7BC,2BAA6B,MAAP,GAAO,IACvCC,mBAASC,KAD8B,mBAC3DC,EAD2D,KACpDC,EADoD,KAMnE,SAASF,IAGR,IAFA,IAAIG,EAAe,GAEVC,EAAI,EAAGA,EAAIR,EAAOQ,IAAK,CAE/B,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIT,EAAOS,IACtBC,KAAKC,SAAWV,EACnBO,EAAOI,MAAK,GAEZJ,EAAOI,MAAK,GAGdN,EAAaM,KAAKJ,GAGnB,OAAOF,EAkBR,SAASb,EAAgBoB,GACxBR,GAAS,SAACS,GAAc,IAAD,EACLD,EAAME,MAAM,KAAKC,IAAIC,QADhB,mBACdR,EADc,KACXF,EADW,KAGhBW,EAAW,SAACT,EAAGF,EAAGY,GAGnBZ,GAAK,GAAKA,EAAIP,GAASS,GAAK,GAAKA,EAAIV,IACxCoB,EAAUV,GAAGF,IAAMY,EAAUV,GAAGF,KAK9BY,EAAYC,IAAUN,GAU1B,OAPAI,EAAST,EAAGF,EAAGY,GACfD,EAAST,EAAI,EAAGF,EAAGY,GACnBD,EAAST,EAAI,EAAGF,EAAGY,GACnBD,EAAST,EAAGF,EAAI,EAAGY,GACnBD,EAAST,EAAGF,EAAI,EAAGY,GAGZA,KAOT,IAAME,EAAY,WACjBhB,EAASF,MAIV,GA7CA,WAEC,IAAK,IAAIM,EAAI,EAAGA,EAAIV,EAAOU,IAC1B,IAAK,IAAIF,EAAI,EAAGA,EAAIP,EAAOO,IAC1B,IAAoB,IAAhBH,EAAMK,GAAGF,GAAa,OAAO,EAGnC,OAAO,EAsCJe,GACH,OACC,yBAAK1B,UAAU,SACd,wBAAIA,UAAU,eAAd,eACA,wBAAIA,UAAU,aAAd,aACA,4BAAQA,UAAU,eAAeC,QAASwB,GAA1C,UAQH,IADA,IAAIE,EAAY,GACPd,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAE/B,IADA,IAAIe,EAAW,GADgB,WAEtBjB,GACR,IAAIM,EAAK,UAAMJ,EAAN,YAAWF,GACpBiB,EAASZ,KAAK,kBAAC,EAAD,CAAMa,IAAKZ,EAAOnB,MAAOU,EAAMK,GAAGF,GAAId,gBAAiB,kBAAMA,EAAgBoB,QAFnFN,EAAI,EAAGA,EAAIP,EAAOO,IAAM,EAAxBA,GAITgB,EAAUX,KACT,wBAAIa,IAAKhB,EAAGb,UAAU,aACpB4B,IAKJ,OACC,yBAAK5B,UAAU,SACd,wBAAIA,UAAU,eAAd,eACA,uBAAGA,UAAU,oBACZ,wDAC0B,6BAD1B,6EAKD,2BAAOA,UAAU,cAChB,+BAAQ2B,IAET,4BAAQ3B,UAAU,eAAeC,QAASwB,GAA1C,WCjIYK,G,OAVA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAyB,EAAnBC,KACvB,OACC,4BAAQhC,UAAU,UACjB,uBAAGiC,KAAK,+BAA+BjC,UAAU,eAAjD,iBACkB+B,M,OCSNG,MATf,WACC,OACC,yBAAKlC,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQ+B,KAAM,SCCGI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fd03d634.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAround: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAround\n *\n **/\n\nfunction Cell({ flipCellsAround, isLit }) {\n\tconst classes = `Cell ${isLit ? 'Cell-lit' : ''}`;\n\treturn <td className={classes} onClick={flipCellsAround} />;\n}\n\nexport default Cell;\n","import React, { useState } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\nimport cloneDeep from 'lodash/cloneDeep';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.4 }) {\n\tconst [ board, setBoard ] = useState(createBoard());\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit \n   * @returns randomly generated array of arrays with random true/false values\n  */\n\tfunction createBoard() {\n\t\tlet initialBoard = [];\n\t\t// create array-of-arrays of true/false values\n\t\tfor (let x = 0; x < nrows; x++) {\n\t\t\tlet newRow = [];\n\t\t\tfor (let y = 0; y < ncols; y++) {\n\t\t\t\tif (Math.random() < chanceLightStartsOn) {\n\t\t\t\t\tnewRow.push(true);\n\t\t\t\t} else {\n\t\t\t\t\tnewRow.push(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tinitialBoard.push(newRow);\n\t\t}\n\n\t\treturn initialBoard;\n\t}\n\n\t/**\n   * checks board in state to determine whether player has won\n   * \n   * @returns boolean \n   */\n\tfunction hasWon() {\n\t\t// check the board in state to determine whether the player has won.\n\t\tfor (let y = 0; y < nrows; y++) {\n\t\t\tfor (let x = 0; x < ncols; x++) {\n\t\t\t\tif (board[y][x] === true) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction flipCellsAround(coord) {\n\t\tsetBoard((oldBoard) => {\n\t\t\tconst [ y, x ] = coord.split('-').map(Number);\n\n\t\t\tconst flipCell = (y, x, boardCopy) => {\n\t\t\t\t// if this coord is actually on board, flip it\n\n\t\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\t\tboardCopy[y][x] = !boardCopy[y][x];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Make a (deep) copy of the oldBoard\n\t\t\tlet boardCopy = cloneDeep(oldBoard);\n\n\t\t\t// in the copy, flip this cell and the cells around it\n\t\t\tflipCell(y, x, boardCopy);\n\t\t\tflipCell(y + 1, x, boardCopy);\n\t\t\tflipCell(y - 1, x, boardCopy);\n\t\t\tflipCell(y, x + 1, boardCopy);\n\t\t\tflipCell(y, x - 1, boardCopy);\n\n\t\t\t// return the copy\n\t\t\treturn boardCopy;\n\t\t});\n\t}\n\n\t/**\n\t * Reset the game \n\t */\n\tconst resetGame = () => {\n\t\tsetBoard(createBoard());\n\t};\n\n\t// if the game is won, just show a winning msg & render nothing else\n\tif (hasWon()) {\n\t\treturn (\n\t\t\t<div className=\"Board\">\n\t\t\t\t<h1 className=\"Board-Title\">Lights Out!</h1>\n\t\t\t\t<h2 className=\"Board-Win\">YOU WON!!</h2>\n\t\t\t\t<button className=\"Board-Reset \" onClick={resetGame}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tlet tableBody = [];\n\tfor (let y = 0; y < nrows; y++) {\n\t\tlet tableRow = [];\n\t\tfor (let x = 0; x < ncols; x++) {\n\t\t\tlet coord = `${y}-${x}`;\n\t\t\ttableRow.push(<Cell key={coord} isLit={board[y][x]} flipCellsAround={() => flipCellsAround(coord)} />);\n\t\t}\n\t\ttableBody.push(\n\t\t\t<tr key={y} className=\"Board-Row\">\n\t\t\t\t{tableRow}\n\t\t\t</tr>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div className=\"Board\">\n\t\t\t<h1 className=\"Board-Title\">Lights Out!</h1>\n\t\t\t<p className=\"Board-Directions\">\n\t\t\t\t<em>\n\t\t\t\t\tTurn off all the lights! <br /> Clicking a button will toggle the lights above, below, left, and\n\t\t\t\t\tright.\n\t\t\t\t</em>\n\t\t\t</p>\n\t\t\t<table className=\"Board-Game\">\n\t\t\t\t<tbody>{tableBody}</tbody>\n\t\t\t</table>\n\t\t\t<button className=\"Board-Reset \" onClick={resetGame}>\n\t\t\t\tReset\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Board;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = ({ year, copy = false }) => {\n\treturn (\n\t\t<footer className=\"Footer\">\n\t\t\t<a href=\"https://github.com/druserkes\" className=\"Footer-Text\">\n\t\t\t\tSerkules &copy; {year}\n\t\t\t</a>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import React from 'react';\nimport Board from './Board';\nimport Footer from './Footer';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Board />\n\t\t\t<Footer year={2020} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}