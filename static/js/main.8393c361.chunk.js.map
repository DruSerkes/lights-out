{"version":3,"sources":["Difficulty.js","Cell.js","Winner.js","Helpers.js","Board.js","Footer.js","App.js","index.js"],"names":["Difficulty","difficulty","setDifficulty","className","htmlFor","type","id","min","max","step","value","onChange","e","Number","target","Cell","flipCellsAround","isLit","classes","onClick","Winner","resetGame","createBoard","nrows","ncols","chanceLightStartsOn","initialBoard","x","newRow","y","Math","random","push","Board","useState","board","setBoard","coord","oldBoard","split","map","flipCell","boardCopy","cloneDeep","tableBody","tableRow","key","hasWon","Footer","year","Date","getFullYear","href","rel","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8393c361.chunk.js","sourcesContent":["import * as React from 'react';\nimport './Difficulty.css';\n\nexport const Difficulty = ({ difficulty, setDifficulty }) => {\n    const handleChange = (e) => setDifficulty(Number(e?.target?.value));\n    return (\n        <div className=\"Difficulty\">\n            <label htmlFor=\"difficulty\">Choose Difficulty</label>\n            <input\n                type=\"range\"\n                id=\"difficulty\"\n                min={3}\n                max={5}\n                step={1}\n                value={difficulty}\n                onChange={handleChange}\n            />\n        </div>\n    )\n};","import * as React from 'react';\nimport './Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAround: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAround\n *\n **/\n\nexport const Cell = ({ flipCellsAround, isLit }) => {\n\tconst classes = `Cell ${isLit ? 'Cell-lit' : ''}`;\n\treturn <td className={classes} onClick={flipCellsAround} />;\n};\n","import * as React from 'react';\n\nexport const Winner = ({ resetGame }) => {\n    const handleClick = () => resetGame();\n    return (\n        <div className=\"Board\">\n            <h2 className=\"Board-Win\">YOU WON!!</h2>\n            <button className=\"Board-Reset \" onClick={handleClick}>\n                Reset\n            </button>\n        </div>\n    );\n}","/** create a board nrows high/ncols wide, each cell randomly lit or unlit \n   * @returns randomly generated array of arrays with random true/false values\n  */\nexport const createBoard = (nrows, ncols, chanceLightStartsOn) => {\n    let initialBoard = [];\n    // create array-of-arrays of true/false values\n    for (let x = 0; x < nrows; x++) {\n        let newRow = [];\n        for (let y = 0; y < ncols; y++) {\n            if (Math.random() < chanceLightStartsOn) {\n                newRow.push(true);\n            } else {\n                newRow.push(false);\n            }\n        }\n        initialBoard.push(newRow);\n    }\n\n    return initialBoard;\n};\n\n/**\n   * checks board in state to determine whether player has won\n   * \n   * @returns boolean \n   */\nexport const hasWon = (nrows, ncols, board) => {\n    // check the board in state to determine whether the player has won.\n    for (let y = 0; y < nrows; y++) {\n        for (let x = 0; x < ncols; x++) {\n            if (board[y][x] === true) return false;\n        }\n    }\n    return true;\n};","import * as React from 'react';\nimport { useState } from 'react';\nimport { Cell } from './Cell';\nimport { Winner } from './Winner';\nimport { createBoard, hasWon } from './Helpers';\nimport './Board.css';\nimport cloneDeep from 'lodash/cloneDeep';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nexport const Board = ({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.4 }) => {\n\tconst [board, setBoard] = useState(() => createBoard(nrows, ncols, chanceLightStartsOn));\n\n\tconst flipCellsAround = (coord) => {\n\t\tsetBoard((oldBoard) => {\n\t\t\tconst [y, x] = coord.split('-').map(Number);\n\n\t\t\tconst flipCell = (y, x, boardCopy) => {\n\t\t\t\t// if this coord is actually on board, flip it\n\n\t\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\t\tboardCopy[y][x] = !boardCopy[y][x];\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Make a (deep) copy of the oldBoard\n\t\t\tlet boardCopy = cloneDeep(oldBoard);\n\n\t\t\t// in the copy, flip this cell and the cells around it\n\t\t\tflipCell(y, x, boardCopy);\n\t\t\tflipCell(y + 1, x, boardCopy);\n\t\t\tflipCell(y - 1, x, boardCopy);\n\t\t\tflipCell(y, x + 1, boardCopy);\n\t\t\tflipCell(y, x - 1, boardCopy);\n\n\t\t\t// return the copy\n\t\t\treturn boardCopy;\n\t\t});\n\t};\n\n\t/**\n\t * Reset the game \n\t */\n\tconst resetGame = () => setBoard(createBoard(nrows, ncols, chanceLightStartsOn));\n\n\tlet tableBody = [];\n\tfor (let y = 0; y < nrows; y++) {\n\t\tlet tableRow = [];\n\t\tfor (let x = 0; x < ncols; x++) {\n\t\t\tlet coord = `${y}-${x}`;\n\t\t\tlet isLit = board[y][x];\n\t\t\ttableRow.push(<Cell key={coord} isLit={isLit} flipCellsAround={() => flipCellsAround(coord)} />);\n\t\t}\n\t\ttableBody.push(\n\t\t\t<tr key={y} className=\"Board-Row\">\n\t\t\t\t{tableRow}\n\t\t\t</tr>\n\t\t);\n\t};\n\n\treturn (\n\t\thasWon(nrows, ncols, board)\n\t\t\t? <Winner resetGame={resetGame} />\n\t\t\t: <div className=\"Board\">\n\n\t\t\t\t<p className=\"Board-Directions\">\n\t\t\t\t\t<em>\n\t\t\t\t\t\tTurn off all the lights!\n\t\t\t\t\t<br />\n\t\t\t\t\tClicking a button will toggle the lights above, below, left, and\n\t\t\t\t\tright.\n\t\t\t\t\t</em>\n\t\t\t\t</p>\n\n\t\t\t\t<table className=\"Board-Game\">\n\t\t\t\t\t<tbody>{tableBody}</tbody>\n\t\t\t\t</table>\n\n\t\t\t\t<button className=\"Board-Reset \" onClick={resetGame}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t);\n};\n","import * as React from 'react';\nimport './Footer.css';\n\nexport const Footer = () => {\n\tconst year = new Date().getFullYear();\n\treturn (\n\t\t<footer className=\"Footer\">\n\t\t\t<a href=\"https://github.com/druserkes\" className=\"Footer-Text\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\tSerkules &copy; {year}\n\t\t\t</a>\n\t\t</footer>\n\t);\n};","import * as React from 'react';\nimport { useState } from 'react';\nimport { Difficulty } from './Difficulty';\nimport { Board } from './Board';\nimport { Footer } from './Footer';\nimport './App.css';\n\n/** Simple app that just shows the LightsOut game. */\n\nexport const App = () => {\n\tconst [difficulty, setDifficulty] = useState(5);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"Board-Title\">Lights Out!</h1>\n\t\t\t<Board ncols={difficulty} nrows={difficulty} />\n\t\t\t<Difficulty difficulty={difficulty} setDifficulty={setDifficulty} />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}